Y[d,,6] = rep(as.numeric(wday(as.POSIXct(strptime(email[d-1,1], "%d %b %Y %H:%M:%S"))) %in% c(1, 7)), A)
Y[d,,7] = rep(as.numeric(pm(as.POSIXct(strptime(email[d-1,1], "%d %b %Y %H:%M:%S")))), A)
}
sendraw = function(data, a, r) {
sum(data[,2] == a & data[, 2+r]==1)
}
# construct recipient covariates X
D = length(edge)
A = length(Montgomery$manager_gender)
P = 14
X = array(0, dim = c(D,A,A,P))
X[,,,1] = 1
timeunit = 3600
for (d in 2:D) {
index = which(email$timepoints >= uniqtime[which(uniqtime==email$timepoints[d])-1]-7*24*timeunit & email$timepoints < email$timepoints[d])
data = email[index, ]
sent = data[, 2]
received = data[, 3:(2+A)]
outdegree = tabulate(sent, A)
indegree = colSums(received)
for (a in 1:A) {
for (r in c(1:A)) {
if (r != a) {
X[d, a, r, 2] = outdegree[a]
X[d, a, r, 3] = indegree[r]
X[d, a, r, 4] = sendraw(data, a, r)
X[d, a, r, 5] = sendraw(data, r, a)
X[d, a, r, 6] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, a, h) * sendraw(data, h, r) / 10
}))
X[d, a, r, 7] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, h, a) * sendraw(data, r, h)
})) / 10
X[d, a, r, 8] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, h, a) * sendraw(data, h, r)
})) / 10
X[d, a, r, 9] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, a, h) * sendraw(data, r, h)
}))	/10
}
X[d, a, , 12] = 1* (Montgomery$manager_gender[a]=="Female")
X[d, a, r, 13] =1* (Montgomery$manager_gender[r]=="Female")
X[d, a, r, 14] =1* (Montgomery$manager_gender[a]==Montgomery$manager_gender[r])
}
X[d, a, , 10] = ifelse(outdegree[a] <sum(X[d,a,,4]),sum(X[d,a,,4])/outdegree[a] , 1)
X[d, a, , 11] = X[d, a, , 2] * X[d, a, , 10] / 10
}
}
prior.beta = list(mean = c(-3.5, rep(0, P-1)), var = 2*diag(P))
prior.eta = list(mean = c(7, rep(0, Q-1)), var = 2*diag(Q))
prior.sigma2 = list(a = 2, b = 1)
email$timepoints =  as.numeric(as.POSIXct(strptime(email[,1], "%d %b %Y %H:%M:%S")))
trim = which(email$timepoints >=7*24*timeunit+email$timepoints[1])
edge = edge[trim]
X = X[trim,,,]
Y = Y[trim,,]
prior.beta = list(mean = c(-3.5, rep(0, P-1)), var = 1*diag(P))
prior.eta = list(mean = c(7, rep(0, Q-1)), var = 1*diag(Q)
Montgomery_infer = Inference(edge, X, Y, 55000, c(20,10,1), 15000, prior.beta, prior.eta, prior.sigma2, initialval = NULL,
proposal.var = c(0.00001, 0.001, 0.1), timeunit = 3600, lasttime = email[min(trim-1), 21] - initialtime, timedist = "lognormal")
prior.beta = list(mean = c(-3.5, rep(0, P-1)), var = 1*diag(P))
prior.eta = list(mean = c(7, rep(0, Q-1)), var = 1*diag(Q))
Montgomery_infer = Inference(edge, X, Y, 55000, c(20,10,1), 15000, prior.beta, prior.eta, prior.sigma2, initialval = NULL,
proposal.var = c(0.00001, 0.001, 0.1), timeunit = 3600, lasttime = email[min(trim-1), 21] - initialtime, timedist = "lognormal")
save(Montgomery_infer, file= "/Users/bomin8319/Desktop/Montgomery_infer.RData")
prior.eta = list(mean = c(7, rep(0, Q-1)), var = 4*diag(Q))
Montgomery_infer4 = Inference(edge, X, Y, 55000, c(20,10,1), 15000, prior.beta, prior.eta, prior.sigma2, initialval = NULL,
proposal.var = c(0.00001, 0.001, 0.1), timeunit = 3600, lasttime = email[min(trim-1), 21] - initialtime, timedist = "lognormal")
save(Montgomery_infer4, file= "/Users/bomin8319/Desktop/Montgomery_infer4.RData")
library(MulticastNetwork)
load("/Users/bomin8319/Box/gainlab_example/Bomin/Montgomery.RData")
edge = Montgomery$edge
X = Montgomery$X
Y = Montgomery$Y
P = dim(X)[4]
Q = dim(Y)[3]
A = dim(Y)[2]
#run inference to estimate beta, eta, u, and sigma2
prior.beta = list(mean = c(-3.5, rep(0, P-1)), var = 2*diag(P))
prior.eta = list(mean = c(7, rep(0, Q-1)), var = 2*diag(Q))
prior.sigma2 = list(a = 2, b = 1)
outer = 500
inner = c(1, 1, 1)
burn = 0
#run infernece
Montgomery_infer = Inference(edge, X, Y, outer, inner, burn, prior.beta, prior.eta, prior.sigma2, initialval = NULL,
proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, lasttime = Montgomery$lasttime, timedist = "lognormal")
# generate data from the model estimates
#Montgomery_PPC = PPC(length(edge), beta = colMeans(Montgomery_infer$beta), eta = colMeans(Montgomery_infer$eta),
#                     sigma2 = mean(Montgomery_infer$sigma2), X, Y, timeunit = 3600, u = Montgomery_infer$u, timedist = "lognormal")
set.seed(1)
missing = list()
#missingness of senders
missing[[1]] = matrix(0, nrow = dim(Y)[1], 1)
missing[[1]][sample(1:dim(Y)[1], 62, replace = FALSE), ] = 1
#missingness of receivers
missing[[2]] = matrix(0, nrow = dim(Y)[1], A)
missing[[2]][sample(1:(dim(Y)[1]*A), 1118, replace = FALSE)] = 1
#missingness of timestamps
missing[[3]] = matrix(0, nrow = dim(Y)[1], 1)
missing[[3]][sample(1:dim(Y)[1], 62, replace = FALSE), ] = 1
for (d in 1:dim(Y)[1]) {
if (missing[[1]][d,1] == 1) {
edge[[d]]$a_d = NA
}
if (sum(missing[[2]][d,]) > 0) {
edge[[d]]$r_d[which(missing[[2]][d,]==1)] = NA
}
if (missing[[3]][d,1] == 1) {
edge[[d]]$t_d = NA
}
}
initial = list()
initial$beta = colMeans(Montgomery_infer$beta)
initial$eta =  colMeans(Montgomery_infer$eta)
initial$u = Montgomery_infer$u
initial$sigma2 = mean(Montgomery_infer$sigma2)
load("/Users/bomin8319/Desktop/MulticastNetwork/Lab/Montgomery.RData")
edge = Montgomery$edge
X = Montgomery$X
Y = Montgomery$Y
P = dim(X)[4]
Q = dim(Y)[3]
A = dim(Y)[2]
#run inference to estimate beta, eta, u, and sigma2
prior.beta = list(mean = c(-3.5, rep(0, P-1)), var = 2*diag(P))
prior.eta = list(mean = c(7, rep(0, Q-1)), var = 2*diag(Q))
prior.sigma2 = list(a = 2, b = 1)
outer = 500
inner = c(1, 1, 1)
burn = 0
#run infernece
Montgomery_infer = Inference(edge, X, Y, outer, inner, burn, prior.beta, prior.eta, prior.sigma2, initialval = NULL,
proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600, lasttime = Montgomery$lasttime, timedist = "lognormal")
load("/Users/bomin8319/Desktop/MulticastNetwork/Montgomery_infer.RData")
load("/Users/bomin8319/Desktop/MulticastNetwork/Emails/Montgomery_infer.RData")
load("/Users/bomin8319/Desktop/MulticastNetwork/Emails/Montgomery_infer.RData")
set.seed(1)
missing = list()
#missingness of senders
missing[[1]] = matrix(0, nrow = dim(Y)[1], 1)
missing[[1]][sample(1:dim(Y)[1], 62, replace = FALSE), ] = 1
#missingness of receivers
missing[[2]] = matrix(0, nrow = dim(Y)[1], A)
missing[[2]][sample(1:(dim(Y)[1]*A), 1118, replace = FALSE)] = 1
#missingness of timestamps
missing[[3]] = matrix(0, nrow = dim(Y)[1], 1)
missing[[3]][sample(1:dim(Y)[1], 62, replace = FALSE), ] = 1
for (d in 1:dim(Y)[1]) {
if (missing[[1]][d,1] == 1) {
edge[[d]]$a_d = NA
}
if (sum(missing[[2]][d,]) > 0) {
edge[[d]]$r_d[which(missing[[2]][d,]==1)] = NA
}
if (missing[[3]][d,1] == 1) {
edge[[d]]$t_d = NA
}
}
initial = list()
initial$beta = colMeans(Montgomery_infer$beta)
initial$eta =  colMeans(Montgomery_infer$eta)
initial$u = Montgomery_infer$u
initial$sigma2 = mean(Montgomery_infer$sigma2)
#will generate 500 predictions (iterate two steps: imputation -> inference)
Montgomery_PPE = PPE(edge, X, Y, 550, c(5,5,1), 50, prior.beta, prior.eta, prior.sigma2,
initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600,
lasttime = email[min(trim-1), 21] - initialtime, MHprop.var = 0.15, timedist = "lognormal")
save(Montgomery_PPE, file = "/Users/bomin8319/Desktop/Montgomery_PPE.RData")
library(MulticastNetwork)
load("/Users/bomin8319/Desktop/MulticastNetwork/Lab/Montgomery.RData")
edge = Montgomery$edge
X = Montgomery$X
Y = Montgomery$Y
P = dim(X)[4]
Q = dim(Y)[3]
A = dim(Y)[2]
#run inference to estimate beta, eta, u, and sigma2
prior.beta = list(mean = c(-3.5, rep(0, P-1)), var = 2*diag(P))
prior.eta = list(mean = c(7, rep(0, Q-1)), var = 2*diag(Q))
prior.sigma2 = list(a = 2, b = 1)
load("/Users/bomin8319/Desktop/MulticastNetwork/Emails/Montgomery_infer.RData")
set.seed(1)
missing = list()
#missingness of senders
missing[[1]] = matrix(0, nrow = dim(Y)[1], 1)
missing[[1]][sample(1:dim(Y)[1], 62, replace = FALSE), ] = 1
#missingness of receivers
missing[[2]] = matrix(0, nrow = dim(Y)[1], A)
missing[[2]][sample(1:(dim(Y)[1]*A), 1118, replace = FALSE)] = 1
#missingness of timestamps
missing[[3]] = matrix(0, nrow = dim(Y)[1], 1)
missing[[3]][sample(1:dim(Y)[1], 62, replace = FALSE), ] = 1
for (d in 1:dim(Y)[1]) {
if (missing[[1]][d,1] == 1) {
edge[[d]]$a_d = NA
}
if (sum(missing[[2]][d,]) > 0) {
edge[[d]]$r_d[which(missing[[2]][d,]==1)] = NA
}
if (missing[[3]][d,1] == 1) {
edge[[d]]$t_d = NA
}
}
initial = list()
initial$beta = colMeans(Montgomery_infer$beta)
initial$eta =  colMeans(Montgomery_infer$eta)
initial$u = Montgomery_infer$u
initial$sigma2 = mean(Montgomery_infer$sigma2)
#will generate 500 predictions (iterate two steps: imputation -> inference)
Montgomery_PPE = PPE(edge, X, Y, 550, c(5,5,1), 50, prior.beta, prior.eta, prior.sigma2,
initial = initial, proposal.var = c(0.0001, 0.001, 0.1), timeunit = 3600,
lasttime = email[min(trim-1), 21] - initialtime, MHprop.var = 0.15, timedist = "lognormal")
save(Montgomery_PPE, file = "/Users/bomin8319/Desktop/Montgomery_PPE.RData")
initial$beta
dim(X)
#source("/Users/bomin8319/Desktop/MulticastNetwork/code/Multicast.R")
library(MulticastNetwork)
library(lubridate)
load('~/Desktop/MulticastNetwork/code/Temporal_Email_Data.Rdata')
Montgomery = Temporal_Email_Data$Montgomery
email = Montgomery$email_data
email = unique(email)
email$timepoints =  as.numeric(as.POSIXct(strptime(email[,1], "%d %b %Y %H:%M:%S")))
email = email[order(email$timepoints), ]
edge = list()
initialtime =  as.numeric(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S")))
for (d in 1:nrow(email)) {
t_d = email[d, 21] - initialtime
edge[[d]] = list(a_d = email[d,2], r_d = as.numeric(email[d,-c(1:2, 21)]), t_d = t_d)
}
uniqtime = unique(email$timepoints)
# construct time covariates Y
D = length(edge)
A = length(Montgomery$manager_gender)
Q = 7
Y = array(1, dim = c(D,A,Q))
for (a in 1:A) {
Y[,a,2] = 1* (Montgomery$manager_gender[a]=="Female")
Y[,a,3] = 1* (Montgomery$manager_department[a]=="County Manager")
}
timeunit = 3600
Y[1,,6] = rep(as.numeric(wday(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S"))) %in% c(1, 7)), A)
Y[1,,7] = rep(pm(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S"))), A)
for (d in 2:D) {
index = which(email$timepoints >= uniqtime[which(uniqtime==email$timepoints[d])-1]-7*24*timeunit & email$timepoints < email$timepoints[d])
sent = email[index, 2]
received = email[index, 3:(2+A)]
Y[d, ,4] = tabulate(sent, A)
Y[d, ,5] = colSums(received)
Y[d,,6] = rep(as.numeric(wday(as.POSIXct(strptime(email[d-1,1], "%d %b %Y %H:%M:%S"))) %in% c(1, 7)), A)
Y[d,,7] = rep(as.numeric(pm(as.POSIXct(strptime(email[d-1,1], "%d %b %Y %H:%M:%S")))), A)
}
sendraw = function(data, a, r) {
sum(data[,2] == a & data[, 2+r]==1)
}
# construct recipient covariates X
D = length(edge)
A = length(Montgomery$manager_gender)
P = 11
X = array(0, dim = c(D,A,A,P))
X[,,,1] = 1
timeunit = 3600
for (d in 2:D) {
index = which(email$timepoints >= uniqtime[which(uniqtime==email$timepoints[d])-1]-7*24*timeunit & email$timepoints < email$timepoints[d])
data = email[index, ]
sent = data[, 2]
received = data[, 3:(2+A)]
outdegree = tabulate(sent, A)
indegree = colSums(received)
for (a in 1:A) {
for (r in c(1:A)[-a]) {
X[d, a, r, 2] = outdegree[a]
X[d, a, r, 3] = indegree[r]
X[d, a, r, 4] = sendraw(data, a, r)
X[d, a, r, 5] = sendraw(data, r, a)
X[d, a, r, 6] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, a, h) * sendraw(data, h, r) / 10
}))
X[d, a, r, 7] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, h, a) * sendraw(data, r, h)
})) / 10
X[d, a, r, 8] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, h, a) * sendraw(data, h, r)
})) / 10
X[d, a, r, 9] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, a, h) * sendraw(data, r, h)
}))	/10
}
X[d, a, , 10] = ifelse(outdegree[a] > 0, sum(X[d,a,,4]), 0)
X[d, a, , 11] = X[d, a, , 2] * X[d, a, , 10] / 10
}
}
#source("/Users/bomin8319/Desktop/MulticastNetwork/code/Multicast.R")
library(MulticastNetwork)
library(lubridate)
load('~/Desktop/MulticastNetwork/code/Temporal_Email_Data.Rdata')
Montgomery = Temporal_Email_Data$Montgomery
email = Montgomery$email_data
email = unique(email)
email$timepoints =  as.numeric(as.POSIXct(strptime(email[,1], "%d %b %Y %H:%M:%S")))
email = email[order(email$timepoints), ]
edge = list()
initialtime =  as.numeric(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S")))
for (d in 1:nrow(email)) {
t_d = email[d, 21] - initialtime
edge[[d]] = list(a_d = email[d,2], r_d = as.numeric(email[d,-c(1:2, 21)]), t_d = t_d)
}
uniqtime = unique(email$timepoints)
# construct time covariates Y
D = length(edge)
A = length(Montgomery$manager_gender)
Q = 7
Y = array(1, dim = c(D,A,Q))
for (a in 1:A) {
Y[,a,2] = 1* (Montgomery$manager_gender[a]=="Female")
Y[,a,3] = 1* (Montgomery$manager_department[a]=="County Manager")
}
timeunit = 3600
Y[1,,6] = rep(as.numeric(wday(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S"))) %in% c(1, 7)), A)
Y[1,,7] = rep(pm(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S"))), A)
for (d in 2:D) {
index = which(email$timepoints >= uniqtime[which(uniqtime==email$timepoints[d])-1]-7*24*timeunit & email$timepoints < email$timepoints[d])
sent = email[index, 2]
received = email[index, 3:(2+A)]
Y[d, ,4] = tabulate(sent, A)
Y[d, ,5] = colSums(received)
Y[d,,6] = rep(as.numeric(wday(as.POSIXct(strptime(email[d-1,1], "%d %b %Y %H:%M:%S"))) %in% c(1, 7)), A)
Y[d,,7] = rep(as.numeric(pm(as.POSIXct(strptime(email[d-1,1], "%d %b %Y %H:%M:%S")))), A)
}
sendraw = function(data, a, r) {
sum(data[,2] == a & data[, 2+r]==1)
}
# construct recipient covariates X
D = length(edge)
A = length(Montgomery$manager_gender)
P = 14
X = array(0, dim = c(D,A,A,P))
X[,,,1] = 1
timeunit = 3600
for (d in 2:D) {
index = which(email$timepoints >= uniqtime[which(uniqtime==email$timepoints[d])-1]-7*24*timeunit & email$timepoints < email$timepoints[d])
data = email[index, ]
sent = data[, 2]
received = data[, 3:(2+A)]
outdegree = tabulate(sent, A)
indegree = colSums(received)
for (a in 1:A) {
for (r in c(1:A)) {
if (r != a) {
X[d, a, r, 2] = outdegree[a]
X[d, a, r, 3] = indegree[r]
X[d, a, r, 4] = sendraw(data, a, r)
X[d, a, r, 5] = sendraw(data, r, a)
X[d, a, r, 6] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, a, h) * sendraw(data, h, r) / 10
}))
X[d, a, r, 7] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, h, a) * sendraw(data, r, h)
})) / 10
X[d, a, r, 8] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, h, a) * sendraw(data, h, r)
})) / 10
X[d, a, r, 9] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, a, h) * sendraw(data, r, h)
}))	/10
}
X[d, a, , 12] = 1* (Montgomery$manager_gender[a]=="Female")
X[d, a, r, 13] =1* (Montgomery$manager_gender[r]=="Female")
X[d, a, r, 14] =1* (Montgomery$manager_gender[a]==Montgomery$manager_gender[r])
}
X[d, a, , 10] = ifelse(outdegree[a] <sum(X[d,a,,4]),sum(X[d,a,,4])/outdegree[a] , 1)
X[d, a, , 11] = X[d, a, , 2] * X[d, a, , 10] / 10
}
}
rm(list=ls())
#source("/Users/bomin8319/Desktop/MulticastNetwork/code/Multicast.R")
library(MulticastNetwork)
library(lubridate)
load('~/Desktop/MulticastNetwork/code/Temporal_Email_Data.Rdata')
Montgomery = Temporal_Email_Data$Montgomery
email = Montgomery$email_data
email = unique(email)
email$timepoints =  as.numeric(as.POSIXct(strptime(email[,1], "%d %b %Y %H:%M:%S")))
email = email[order(email$timepoints), ]
edge = list()
initialtime =  as.numeric(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S")))
for (d in 1:nrow(email)) {
t_d = email[d, 21] - initialtime
edge[[d]] = list(a_d = email[d,2], r_d = as.numeric(email[d,-c(1:2, 21)]), t_d = t_d)
}
uniqtime = unique(email$timepoints)
# construct time covariates Y
D = length(edge)
A = length(Montgomery$manager_gender)
Q = 7
Y = array(1, dim = c(D,A,Q))
for (a in 1:A) {
Y[,a,2] = 1* (Montgomery$manager_gender[a]=="Female")
Y[,a,3] = 1* (Montgomery$manager_department[a]=="County Manager")
}
timeunit = 3600
Y[1,,6] = rep(as.numeric(wday(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S"))) %in% c(1, 7)), A)
Y[1,,7] = rep(pm(as.POSIXct(strptime("01 Mar 2012 00:00:00", "%d %b %Y %H:%M:%S"))), A)
for (d in 2:D) {
index = which(email$timepoints >= uniqtime[which(uniqtime==email$timepoints[d])-1]-7*24*timeunit & email$timepoints < email$timepoints[d])
sent = email[index, 2]
received = email[index, 3:(2+A)]
Y[d, ,4] = tabulate(sent, A)
Y[d, ,5] = colSums(received)
Y[d,,6] = rep(as.numeric(wday(as.POSIXct(strptime(email[d-1,1], "%d %b %Y %H:%M:%S"))) %in% c(1, 7)), A)
Y[d,,7] = rep(as.numeric(pm(as.POSIXct(strptime(email[d-1,1], "%d %b %Y %H:%M:%S")))), A)
}
sendraw = function(data, a, r) {
sum(data[,2] == a & data[, 2+r]==1)
}
# construct recipient covariates X
D = length(edge)
A = length(Montgomery$manager_gender)
P = 14
X = array(0, dim = c(D,A,A,P))
X[,,,1] = 1
timeunit = 3600
for (d in 2:D) {
index = which(email$timepoints >= uniqtime[which(uniqtime==email$timepoints[d])-1]-7*24*timeunit & email$timepoints < email$timepoints[d])
data = email[index, ]
sent = data[, 2]
received = data[, 3:(2+A)]
outdegree = tabulate(sent, A)
indegree = colSums(received)
for (a in 1:A) {
for (r in c(1:A)) {
if (r != a) {
X[d, a, r, 2] = outdegree[a]
X[d, a, r, 3] = indegree[r]
X[d, a, r, 4] = sendraw(data, a, r)
X[d, a, r, 5] = sendraw(data, r, a)
X[d, a, r, 6] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, a, h) * sendraw(data, h, r) / 10
}))
X[d, a, r, 7] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, h, a) * sendraw(data, r, h)
})) / 10
X[d, a, r, 8] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, h, a) * sendraw(data, h, r)
})) / 10
X[d, a, r, 9] = sum(sapply(c(1:A)[-c(a,r)], function(h) {
sendraw(data, a, h) * sendraw(data, r, h)
}))	/10
}
X[d, a, , 12] = 1* (Montgomery$manager_gender[a]=="Female")
X[d, a, r, 13] =1* (Montgomery$manager_gender[r]=="Female")
X[d, a, r, 14] =1* (Montgomery$manager_gender[a]==Montgomery$manager_gender[r])
}
X[d, a, , 10] = ifelse(outdegree[a] <sum(X[d,a,,4]),sum(X[d,a,,4])/outdegree[a] , 1)
X[d, a, , 11] = X[d, a, , 2] * X[d, a, , 10] / 10
}
}
load("⁨iCloud Drive⁩ ▸ ⁨Desktop⁩ ▸ ⁨DAME_revision⁩")
load("Desktop\\")
load("/Users/bomin8319/Desktop/DAME_revision/UN_full_new.RData")
UN$D
rm(list=ls())
################################
#simulation 1
library(devtools)
setwd('/Users/bomin8319/Desktop/DAME_revision/DAME_code_revised/DAME_pkg_revised/R')
load_all()
library(fields)
library(matrixStats)
library(mvtnorm)
library(FastGP)
library(LaplacesDemon)
library(MCMCpack)
library(DLFM2)
library(coda)
library(ggplot2)
library(gridExtra)
# simulation 1-1
nsim = 1
kappas = rep(30, 4)
Time = 10
N = 20
R = 2
dist_ij = c()
for (i in 1:Time) {
for (j in 1:Time) {
dist_ij = c(dist_ij, abs(i-j))
}
}
dist_ij = matrix(dist_ij, Time, Time)
BETA = lapply(1:4, function(m){matrix(0, 1, Time)})
THETA = lapply(1:4, function(m){matrix(0, N, Time)})
UDUstat = lapply(1:4, function(m){matrix(0, 2, Time)})
Error = rep(0, 5)
Error2 = rep(0, 5)
Error3 = rep(0, 5)
Error4 = rep(0, 5)
Kappa = rep(0, 4)
matrix(Exponential(dist_ij, kappas[p]), Time, Time, byrow = TRUE)
p = 1
matrix(Exponential(dist_ij, kappas[p]), Time, Time, byrow = TRUE)
matrix(Exponential(dist_ij, 2), Time, Time, byrow = TRUE)
matrix(Exponential(dist_ij, 30), Time, Time, byrow = TRUE)
matrix(Exponential(dist_ij, 2), Time, Time, byrow = TRUE)
matrix(Exponential(dist_ij, 30), Time, Time, byrow = TRUE)
matrix(Exponential(dist_ij, 2), Time, Time, byrow = TRUE)
matrix(Exponential(dist_ij, 0.01), Time, Time, byrow = TRUE)
matrix(Exponential(dist_ij, 0.001), Time, Time, byrow = TRUE)
matrix(Exponential(dist_ij, 30), Time, Time, byrow = TRUE)
matrix(Exponential(dist_ij, 2), Time, Time, byrow = TRUE)
matrix(Exponential(dist_ij, 0.001), Time, Time, byrow = TRUE)
