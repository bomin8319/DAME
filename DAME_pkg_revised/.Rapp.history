cor(c(U), c(U_true)) #should be very high since only one update
cbind(A_inv %*% b_nr, U_true[,n,r])
library(mvtnorm)#
library(fields)#
N = 20#
R = 2#
Time = 10#
Y = array(0, dim = c(Time, N, N))#
U = array(0, dim = c(Time, N, R))#
D = array(0, dim = c(Time, R, R))#
#
#Below are for GP#
kappa = 1#
tau = 1#
#
dist_ij = c()#
for (t1 in 1:Time) {#
    for (t2 in 1:Time) {#
    	dist_ij = c(dist_ij, abs(t1-t2))#
    }#
}#
GPvar = matrix(Exponential(dist_ij, kappa), Time, Time, byrow = TRUE)#
GPvar_inv = solve(GPvar)#
GPvar #temporal correlation structure#
####################
#
#Generate true values  #
D_raw = rmvnorm(2, rep(0, Time), tau * GPvar)    #independent across r=1,2#
for (t in 1:Time) {#
	D[t,,] = diag(D_raw[,t])#
} #
#
for (n in 1:N) {#
	U_i = rmvnorm(2, rep(0, Time), tau * GPvar)    #independent across r=1,2#
	for (t in 1:Time) {#
		U[t,n,] = U_i[,t]#
	} #
}#
#
for (t in 1:Time) {#
	error = matrix(0, N, N)#
	error[upper.tri(error)] = rnorm(N*(N-1)/2, 0, 1)#
	Y[t,,] = U[t,,] %*% D[t,,] %*% t(U[t,,]) + (error + t(error))#
	diag(Y[t,,]) = 0#
}#
#
U_true = U#
##############
# Given everything fixed at the true value, let's update U according to the new derivation#
for (n in 1:N) {#
	VV_nr= matrix(0, Time, Time)#
	b_nr = matrix(0, Time)#
	for (r in 1:R){#
		for (t in 1:Time) {#
			V = D[t,,] %*% t(U[t,,])#
			VV = (V %*% t(V))#
			VV_nr[t, t] = VV[r,r]#
			b_nr[t] = 2*VV[1,2] * U[t, n, -r] + (V %*% Y[t,,n])[r]#
		}#
		A = VV_nr + GPvar_inv#
		A_inv = solve(A)#
		U_nr = rmvnorm(1, A_inv %*% b_nr, A_inv)#
		#print(cbind(A_inv %*% b_nr, U_true[,n,r]))#
		for (t in 1:Time) {#
			U[t, n, r] = U_nr[t]#
		}#
	}#
}#
#
####result#
U[1,, ]#
U_true[1,,]#
#or#
cor(c(U), c(U_true)) #should be very high since only one update
GPvar #temporal correlation structure
library(amen)
ame
rUV_sym_fc
rUV_fc
library(amen)
rUV_sym_fc
396/22
load('~/Desktop/UN_full_new.RData'load('~/Desktop/UN_full4_new.RData'))
load('~/Desktop/UN_full_new.RData'
)
load('~/Desktop/UN_full_new.RData')
names(UN)
plot(UN$s2)
plot(UN$tau[,1])
plot(UN$tau[,12)
plot(UN$tau[,2])
plot(UN$tau[,6], type = 'l')
plot(UN$tau[,7], type = 'l')
plot(UN$tau[,8], type = 'l')
plot(UN$tau[-c(1:100),8], type = 'l')
plot(UN$tau[-c(1:100),9], type = 'l')
plot(UN$tau[-c(1:300),9], type = 'l')
plot(UN$tau[-c(1:300),10], type = 'l')
plot(UN$corr[,1])
plot(UN$corr[,2], type = 'l')
plot(UN$corr[,3], type = 'l')
plot(UN$corr[,4], type = 'l')
plot(UN$DPS[,1], type = 'l')
plot(UN$DPS[[1]][,1], type = 'l')
plot(UN$DPS[[1]][-c(1:300),1], type = 'l')
plot(UN$DPS[[1]][-c(1:300),2], type = 'l')
plot(UN$DPS[[2]][-c(1:300),2], type = 'l')
plot(UN$DPS[[3]][-c(1:300),2], type = 'l')
plot(UN$DPS[[4]][-c(1:300),2], type = 'l')
UN$D
colMeans(UN$BETA[[1]])
colMeans(UN$BETA[[2]])
colMeans(UN$BETA[[3]])
colMeans(UN$BETA[[4]])
colMeans(UN$BETA[[32]])
colMeans(UN$BETA[[1]])
plot(UN$Degree[[1]][,1])
plot(UN$Degree[[1]][,1], type = 'l')
plot(UN$Degree[[1]][,100], type = 'l')
plot(UN$Degree[[1]][,10], type = 'l')
exp(-1/0.001)
setwd("⁨/Users/bomin8319/Desktop⁩/DAME_revision⁩/DAME_code_revised⁩/DAME⁩/DAME_pkg_revised/R⁩")
setwd("⁨/Users/bomin8319/Desktop/DAME_code_revised⁩/DAME⁩/DAME_pkg_revised/R⁩")
50.36*(145/360)
50.36*(150/360)
load('~/Desktop/DAME_revision/UN_full1.RData')
plot(UN$s2, type = 'l')
names(UN)
plot(UN$BETA[[1]][,1], type = 'l')
plot(UN$BETA[[1]][,2], type = 'l')
plot(UN$s2, type = 'l')
plot(UN$BETA[[1]][,1], type = 'l')
plot(UN$BETA[[1]][,2], type = 'l')
plot(UN$BETA[[1]][,6], type = 'l')
plot(UN$BETA[[10]][,6], type = 'l')
plot(UN$BETA[[12]][,6], type = 'l')
plot(UN$theta[[12]][,6], type = 'l')
plot(UN$theta[[12]][,16], type = 'l')
plot(UN$theta[[12]][,26], type = 'l')
plot(UN$theta[[12]][,36], type = 'l')
plot(UN$theta[[12]][,50], type = 'l')
plot(UN$theta[[12]][,100], type = 'l')
plot(UN$theta[[12]][,10], type = 'l')
plot(UN$theta[[1]][,10], type = 'l')
plot(UN$theta[[30]][,20], type = 'l')
plot(UN$theta[[30]][,30], type = 'l')
plot(UN$theta[[30]][,50], type = 'l')
plot(UN$theta[[32]][,50], type = 'l')
plot(UN$theta[[32]][,98], type = 'l')
plot(UN$theta[[32]][,92], type = 'l')
plot(UN$theta[[32]][,97], type = 'l')
plot(UN$theta[[32]][,17], type = 'l')
plot(UN$theta[[32]][,15], type = 'l')
plot(UN$theta[[32]][,1], type = 'l')
plot(UN$theta[[32]][,2], type = 'l')
plot(UN$theta[[32]][,22], type = 'l')
plot(UN$theta[[32]][,25], type = 'l')
plot(UN$theta[[2]][,25], type = 'l')
plot(UN$theta[[22]][,25], type = 'l')
plot(UN$theta[[22]][,45], type = 'l')
plot(UN$theta[[22]][,5], type = 'l')
plot(UN$theta[[32]][,15], type = 'l')
plot(UN$theta[[32]][,75], type = 'l')
plot(UN$theta[[32]][,85], type = 'l')
plot(UN$theta[[12]][,85], type = 'l')
plot(UN$tau[,1], type = 'l')
plot(UN$tau[,2], type = 'l')
plot(UN$tau[,6], type = 'l')
plot(UN$tau[,7], type = 'l')
plot(UN$tau[,9], type = 'l')
plot(UN$tau[,10], type = 'l')
plot(UN$tau[,8], type = 'l')
plot(UN$tau[-c(1:100),8], type = 'l')
plot(UN$tau[-c(1:100),9], type = 'l')
plot(UN$tau[-c(1:100),8], type = 'l')
plot(UN$kappas[-c(1:100),8], type = 'l')
plot(UN$kappas[,1], type = 'l')
plot(UN$kappas[,2], type = 'l')
plot(UN$kappas[,10], type = 'l')
plot(UN$kappas[,8], type = 'l')
plot(UN$kappas[,9], type = 'l')
plot(UN$kappas[-c(1:100),8], type = 'l')
plot(UN$kappas[-c(1:100),9], type = 'l')
plot(UN$kappas[-c(1:200),8], type = 'l')
plot(UN$kappas[-c(1:150),8], type = 'l')
plot(UN$kappas[-c(1:200),8], type = 'l')
names(UN)
plot(UN$DPS[[1]])
dim(UN$DPS[[1]])
plot(UN$DPS[[1]][,1], type = 'l')
plot(UN$DPS[[1]][-c(1:200),1], type = 'l')
plot(UN$Degree[[1]][,1], type = 'l')
plot(UN$Degree[[32]][,1], type = 'l')
plot(UN$Degree[[32]][,10], type = 'l')
plot(UN$DPS[[1]][-c(1:200),1], type = 'l')
plot(UN$secondDegree[[10]][,12], type = 'l')
plot(UN$secondDegree[[10]][,32], type = 'l')
plot(UN$secondDegree[[50]][,32], type = 'l')
plot(UN$secondDegree[[20]][,32], type = 'l')
plot(UN$thirdDegree[[34]][,22], type = 'l')
plot(UN$thirdDegree[[31]][,22], type = 'l')
plot(UN$thirdDegree[[21]][,62], type = 'l')
UN$UDU
names(UN)
plot(UN$DPS[[1]][,1], type = 'l')
plot(UN$UPS[[1]][1,2*c(1:500)], type = 'l')
load('~/Desktop/DAME_revision/UN_full1.RData')
plot(UN$kappas[,10])
plot(UN$kappas[,9])
plot(UN$kappas[-c(1:200),9], type = 'l')
plot(UN$taus[-c(1:200),9], type = 'l')
plot(UN$tau[-c(1:200),9], type = 'l')
/var/folders/b5/7s4y_5nd7597pgcnph_0mpcc0000gn/T/com.apple.mail/com.apple.mail.drag-T0x600000a96d40.tmp.iVor2H/sim_GP_univariate.R
load('~/Desktop/DAME_revision/UN_full1.RData')
names(UN)
UN$thirdDegree[[1]]
rm(list=ls())#
#################################
#Generate GP data#
library(fields)#
library(mvtnorm)#
library(FastGP)#
kappas_true = kappas = 30  #very highly correlated (can change this to no correlation = 0.001 or medium = 10)#
Time = 10#
dist_ij = c()#
for (i in 1:Time) {#
 for (j in 1:Time) {#
 dist_ij = c(dist_ij, abs(i-j))#
 }#
}#
dist_ij = matrix(dist_ij, Time, Time)#
tau_p_true = tau_p = 1#
#
#generate data#
y = rmvnorm(500, rep(0, Time), tau_p * matrix(Exponential(dist_ij, kappas), Time, Time, byrow = TRUE))#
GPpost = function(kappa, parameter, tau, dist_ij, a, b) {#
    if (kappa > 0 & tau > 0) {#
        lprior1 = dhalfcauchy(kappa, 5, log = TRUE)#
        lprior2 = sum(dinvgamma(tau, a, b, log = TRUE))#
        Time = nrow(parameter)#
        covfcmat = Exponential(dist_ij, kappa, phi = tau)#
        if (is.positive.definite(covfcmat) == FALSE) {covfcmat = as.matrix(nearPD(covfcmat)$mat)}#
        dims = ncol(parameter)#
        lpost = 0#
        for (col in 1:dims) {#
        		if (sum(is.na(parameter[,col])) == 0) {#
            lpost = lpost + rcpp_log_dmvnorm(covfcmat, rep(0, Time), c(parameter[,col]), FALSE)#
            }#
        }#
        sums = as.vector(lpost + lprior1 + lprior2)#
    } else {#
        sums = -Inf#
    }#
    return(sums)#
}
#estimation of GP parameters#
a = 2#
b = 1#
#initial values#
kappas = rhalfcauchy(1, 5)#
tau_p = rinvgamma(1, a, b)#
#
kappasPS = c()#
tauPS = c()#
for (it in 1:2500) {#
var.old = c(kappas, tau_p)#
var.new = exp(rcpp_rmvnorm(1, diag(c(0.01, 0.1)) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))#
temp = GPpost(var.new[1], t(y), var.new[2], dist_ij, a, b) -#
       GPpost(var.old[1], t(y), var.old[2], dist_ij, a, b)#
alpha = min(0, temp)#
if (u <= alpha) {#
	kappas = var.new[1]#
	tau_p = var.new[2]#
}#
	kappasPS = c(kappasPS, kappas)#
	tauPS = c(tauPS, tau_p)#
}#
par(mfrow = c(1, 2))#
plot(tauPS[-c(1:500)], type = 'l')#
abline(h = tau_p_true, col= "red")#
plot(kappasPS[-c(1:500)], type = 'l')#
abline(h = kappas_true, col= "red")
rm(list=ls())#
#################################
#Generate GP data#
library(fields)#
library(mvtnorm)#
library(FastGP)#
kappas_true = kappas = 30  #very highly correlated (can change this to no correlation = 0.001 or medium = 10)#
Time = 10#
dist_ij = c()#
for (i in 1:Time) {#
 for (j in 1:Time) {#
 dist_ij = c(dist_ij, abs(i-j))#
 }#
}#
dist_ij = matrix(dist_ij, Time, Time)#
tau_p_true = tau_p = 1#
#
#generate data#
y = rmvnorm(500, rep(0, Time), tau_p * matrix(Exponential(dist_ij, kappas), Time, Time, byrow = TRUE))#
GPpost = function(kappa, parameter, tau, dist_ij, a, b) {#
    if (kappa > 0 & tau > 0) {#
        lprior1 = dhalfcauchy(kappa, 5, log = TRUE)#
        lprior2 = sum(dinvgamma(tau, a, b, log = TRUE))#
        Time = nrow(parameter)#
        covfcmat = Exponential(dist_ij, kappa, phi = tau)#
        if (is.positive.definite(covfcmat) == FALSE) {covfcmat = as.matrix(nearPD(covfcmat)$mat)}#
        dims = ncol(parameter)#
        lpost = 0#
        for (col in 1:dims) {#
        		if (sum(is.na(parameter[,col])) == 0) {#
            lpost = lpost + rcpp_log_dmvnorm(covfcmat, rep(0, Time), c(parameter[,col]), FALSE)#
            }#
        }#
        sums = as.vector(lpost + lprior1 + lprior2)#
    } else {#
        sums = -Inf#
    }#
    return(sums)#
}
#estimation of GP parameters#
a = 2#
b = 1#
#initial values#
kappas = rhalfcauchy(1, 5)#
tau_p = rinvgamma(1, a, b)#
#
kappasPS = c()#
tauPS = c()#
for (it in 1:2500) {#
var.old = c(kappas, tau_p)#
var.new = exp(rcpp_rmvnorm(1, diag(c(0.01, 0.1)) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))#
temp = GPpost(var.new[1], t(y), var.new[2], dist_ij, a, b) -#
       GPpost(var.old[1], t(y), var.old[2], dist_ij, a, b)#
alpha = min(0, temp)#
if (u <= alpha) {#
	kappas = var.new[1]#
	tau_p = var.new[2]#
}#
	kappasPS = c(kappasPS, kappas)#
	tauPS = c(tauPS, tau_p)#
}#
par(mfrow = c(1, 2))#
plot(tauPS[-c(1:500)], type = 'l')#
abline(h = tau_p_true, col= "red")#
plot(kappasPS[-c(1:500)], type = 'l')#
abline(h = kappas_true, col= "red")
rm(list=ls())#
#################################
#Generate GP data#
library(fields)#
library(mvtnorm)#
library(FastGP)
kappas_true = kappas = 30  #very highly correlated (can change this to no correlation = 0.001 or medium = 10)#
Time = 10#
dist_ij = c()#
for (i in 1:Time) {#
 for (j in 1:Time) {#
 dist_ij = c(dist_ij, abs(i-j))#
 }#
}#
dist_ij = matrix(dist_ij, Time, Time)#
tau_p_true = tau_p = 1#
#
#generate data#
y = rmvnorm(500, rep(0, Time), tau_p * matrix(Exponential(dist_ij, kappas), Time, Time, byrow = TRUE))#
GPpost = function(kappa, parameter, tau, dist_ij, a, b) {#
    if (kappa > 0 & tau > 0) {#
        lprior1 = dhalfcauchy(kappa, 5, log = TRUE)#
        lprior2 = sum(dinvgamma(tau, a, b, log = TRUE))#
        Time = nrow(parameter)#
        covfcmat = Exponential(dist_ij, kappa, phi = tau)#
        if (is.positive.definite(covfcmat) == FALSE) {covfcmat = as.matrix(nearPD(covfcmat)$mat)}#
        dims = ncol(parameter)#
        lpost = 0#
        for (col in 1:dims) {#
        		if (sum(is.na(parameter[,col])) == 0) {#
            lpost = lpost + rcpp_log_dmvnorm(covfcmat, rep(0, Time), c(parameter[,col]), FALSE)#
            }#
        }#
        sums = as.vector(lpost + lprior1 + lprior2)#
    } else {#
        sums = -Inf#
    }#
    return(sums)#
}#
#estimation of GP parameters#
a = 2#
b = 1#
#initial values#
kappas = rhalfcauchy(1, 5)#
tau_p = rinvgamma(1, a, b)#
#
kappasPS = c()#
tauPS = c()#
for (it in 1:2500) {#
var.old = c(kappas, tau_p)#
var.new = exp(rcpp_rmvnorm(1, diag(c(0.01, 0.1)) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))#
temp = GPpost(var.new[1], t(y), var.new[2], dist_ij, a, b) -#
       GPpost(var.old[1], t(y), var.old[2], dist_ij, a, b)#
alpha = min(0, temp)#
if (u <= alpha) {#
	kappas = var.new[1]#
	tau_p = var.new[2]#
}#
	kappasPS = c(kappasPS, kappas)#
	tauPS = c(tauPS, tau_p)#
}#
par(mfrow = c(1, 2))#
plot(tauPS[-c(1:500)], type = 'l')#
abline(h = tau_p_true, col= "red")#
plot(kappasPS[-c(1:500)], type = 'l')#
abline(h = kappas_true, col= "red")
rm(list=ls())#
#################################
#Generate GP data#
library(fields)#
library(mvtnorm)#
library(FastGP)#
kappas_true = kappas = 30  #very highly correlated (can change this to no correlation = 0.001 or medium = 10)#
Time = 10#
dist_ij = c()#
for (i in 1:Time) {#
 for (j in 1:Time) {#
 dist_ij = c(dist_ij, abs(i-j))#
 }#
}#
dist_ij = matrix(dist_ij, Time, Time)#
tau_p_true = tau_p = 1#
#
#generate data#
y = rmvnorm(500, rep(0, Time), tau_p * matrix(Exponential(dist_ij, kappas), Time, Time, byrow = TRUE))#
GPpost = function(kappa, parameter, tau, dist_ij, a, b) {#
    if (kappa > 0 & tau > 0) {#
        lprior1 = dhalfcauchy(kappa, 5, log = TRUE)#
        lprior2 = sum(dinvgamma(tau, a, b, log = TRUE))#
        Time = nrow(parameter)#
        covfcmat = Exponential(dist_ij, kappa, phi = tau)#
        if (is.positive.definite(covfcmat) == FALSE) {covfcmat = as.matrix(nearPD(covfcmat)$mat)}#
        dims = ncol(parameter)#
        lpost = 0#
        for (col in 1:dims) {#
        		if (sum(is.na(parameter[,col])) == 0) {#
            lpost = lpost + rcpp_log_dmvnorm(covfcmat, rep(0, Time), c(parameter[,col]), FALSE)#
            }#
        }#
        sums = as.vector(lpost + lprior1 + lprior2)#
    } else {#
        sums = -Inf#
    }#
    return(sums)#
}#
#estimation of GP parameters#
a = 2#
b = 1#
#initial values#
kappas = rhalfcauchy(1, 5)#
tau_p = rinvgamma(1, a, b)#
#
kappasPS = c()#
tauPS = c()#
for (it in 1:2500) {#
var.old = c(kappas, tau_p)#
var.new = exp(rmvnorm(1, diag(c(0.01, 0.1)) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))#
temp = GPpost(var.new[1], t(y), var.new[2], dist_ij, a, b) -#
       GPpost(var.old[1], t(y), var.old[2], dist_ij, a, b)#
alpha = min(0, temp)#
if (u <= alpha) {#
	kappas = var.new[1]#
	tau_p = var.new[2]#
}#
	kappasPS = c(kappasPS, kappas)#
	tauPS = c(tauPS, tau_p)#
}
?rhalfcauchy
??rhalfcauchy
rm(list=ls())#
#################################
#Generate GP data#
library(fields)#
library(mvtnorm)#
library(FastGP)#
library(LaplacesDemon)#
kappas_true = kappas = 30  #very highly correlated (can change this to no correlation = 0.001 or medium = 10)#
Time = 10#
dist_ij = c()#
for (i in 1:Time) {#
 for (j in 1:Time) {#
 dist_ij = c(dist_ij, abs(i-j))#
 }#
}#
dist_ij = matrix(dist_ij, Time, Time)#
tau_p_true = tau_p = 1#
#
#generate data#
y = rmvnorm(500, rep(0, Time), tau_p * matrix(Exponential(dist_ij, kappas), Time, Time, byrow = TRUE))#
GPpost = function(kappa, parameter, tau, dist_ij, a, b) {#
    if (kappa > 0 & tau > 0) {#
        lprior1 = dhalfcauchy(kappa, 5, log = TRUE)#
        lprior2 = sum(dinvgamma(tau, a, b, log = TRUE))#
        Time = nrow(parameter)#
        covfcmat = Exponential(dist_ij, kappa, phi = tau)#
        if (is.positive.definite(covfcmat) == FALSE) {covfcmat = as.matrix(nearPD(covfcmat)$mat)}#
        dims = ncol(parameter)#
        lpost = 0#
        for (col in 1:dims) {#
        		if (sum(is.na(parameter[,col])) == 0) {#
            lpost = lpost + rcpp_log_dmvnorm(covfcmat, rep(0, Time), c(parameter[,col]), FALSE)#
            }#
        }#
        sums = as.vector(lpost + lprior1 + lprior2)#
    } else {#
        sums = -Inf#
    }#
    return(sums)#
}#
#estimation of GP parameters#
a = 2#
b = 1#
#initial values#
kappas = rhalfcauchy(1, 5)#
tau_p = rinvgamma(1, a, b)#
#
kappasPS = c()#
tauPS = c()#
for (it in 1:2500) {#
var.old = c(kappas, tau_p)#
var.new = exp(rmvnorm(1, diag(c(0.01, 0.1)) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))#
temp = GPpost(var.new[1], t(y), var.new[2], dist_ij, a, b) -#
       GPpost(var.old[1], t(y), var.old[2], dist_ij, a, b)#
alpha = min(0, temp)#
if (u <= alpha) {#
	kappas = var.new[1]#
	tau_p = var.new[2]#
}#
	kappasPS = c(kappasPS, kappas)#
	tauPS = c(tauPS, tau_p)#
}
rm(list=ls())#
#################################
#Generate GP data#
library(fields)#
library(mvtnorm)#
library(FastGP)#
library(LaplacesDemon)#
kappas_true = kappas = 30  #very highly correlated (can change this to no correlation = 0.001 or medium = 10)#
Time = 10#
dist_ij = c()#
for (i in 1:Time) {#
 for (j in 1:Time) {#
 dist_ij = c(dist_ij, abs(i-j))#
 }#
}#
dist_ij = matrix(dist_ij, Time, Time)#
tau_p_true = tau_p = 1#
#
#generate data#
y = rmvnorm(500, rep(0, Time), tau_p * matrix(Exponential(dist_ij, kappas), Time, Time, byrow = TRUE))#
GPpost = function(kappa, parameter, tau, dist_ij, a, b) {#
    if (kappa > 0 & tau > 0) {#
        lprior1 = dhalfcauchy(kappa, 5, log = TRUE)#
        lprior2 = sum(dinvgamma(tau, a, b, log = TRUE))#
        Time = nrow(parameter)#
        covfcmat = Exponential(dist_ij, kappa, phi = tau)#
        #if (is.positive.definite(covfcmat) == FALSE) {covfcmat = as.matrix(nearPD(covfcmat)$mat)}#
        dims = ncol(parameter)#
        lpost = 0#
        for (col in 1:dims) {#
        		if (sum(is.na(parameter[,col])) == 0) {#
            lpost = lpost + rcpp_log_dmvnorm(covfcmat, rep(0, Time), c(parameter[,col]), FALSE)#
            }#
        }#
        sums = as.vector(lpost + lprior1 + lprior2)#
    } else {#
        sums = -Inf#
    }#
    return(sums)#
}#
#estimation of GP parameters#
a = 2#
b = 1#
#initial values#
kappas = rhalfcauchy(1, 5)#
tau_p = rinvgamma(1, a, b)#
#
kappasPS = c()#
tauPS = c()#
for (it in 1:2500) {#
var.old = c(kappas, tau_p)#
var.new = exp(rmvnorm(1, diag(c(0.01, 0.1)) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))#
temp = GPpost(var.new[1], t(y), var.new[2], dist_ij, a, b) -#
       GPpost(var.old[1], t(y), var.old[2], dist_ij, a, b)#
alpha = min(0, temp)#
if (u <= alpha) {#
	kappas = var.new[1]#
	tau_p = var.new[2]#
}#
	kappasPS = c(kappasPS, kappas)#
	tauPS = c(tauPS, tau_p)#
}
kappas
tau_p
rm(list=ls())#
#################################
#Generate GP data#
library(fields)#
library(mvtnorm)#
library(FastGP)#
library(LaplacesDemon)#
kappas_true = kappas = 30  #very highly correlated (can change this to no correlation = 0.001 or medium = 10)#
Time = 10#
dist_ij = c()#
for (i in 1:Time) {#
 for (j in 1:Time) {#
 dist_ij = c(dist_ij, abs(i-j))#
 }#
}#
dist_ij = matrix(dist_ij, Time, Time)#
tau_p_true = tau_p = 1#
#
#generate data#
y = rmvnorm(500, rep(0, Time), tau_p * matrix(Exponential(dist_ij, kappas), Time, Time, byrow = TRUE))#
GPpost = function(kappa, parameter, tau, dist_ij, a, b) {#
    if (kappa > 0 & tau > 0) {#
        lprior1 = dhalfcauchy(kappa, 5, log = TRUE)#
        lprior2 = sum(dinvgamma(tau, a, b, log = TRUE))#
        Time = nrow(parameter)#
        covfcmat = Exponential(dist_ij, kappa, phi = tau)#
        #if (is.positive.definite(covfcmat) == FALSE) {covfcmat = as.matrix(nearPD(covfcmat)$mat)}#
        dims = ncol(parameter)#
        lpost = 0#
        for (col in 1:dims) {#
        		if (sum(is.na(parameter[,col])) == 0) {#
            lpost = lpost + rcpp_log_dmvnorm(covfcmat, rep(0, Time), c(parameter[,col]), FALSE)#
            }#
        }#
        sums = as.vector(lpost + lprior1 + lprior2)#
    } else {#
        sums = -Inf#
    }#
    return(sums)#
}
#estimation of GP parameters#
a = 2#
b = 1#
#initial values#
kappas = rhalfcauchy(1, 5)#
tau_p = rinvgamma(1, a, b)#
#
kappasPS = c()#
tauPS = c()
var.old = c(kappas, tau_p)#
var.new = exp(rmvnorm(1, diag(c(0.01, 0.1)) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))
rmvnorm
rm(list=ls())#
#################################
#Generate GP data#
library(fields)#
library(mvtnorm)#
library(FastGP)#
library(LaplacesDemon)#
kappas_true = kappas = 30  #very highly correlated (can change this to no correlation = 0.001 or medium = 10)#
Time = 10#
dist_ij = c()#
for (i in 1:Time) {#
 for (j in 1:Time) {#
 dist_ij = c(dist_ij, abs(i-j))#
 }#
}#
dist_ij = matrix(dist_ij, Time, Time)#
tau_p_true = tau_p = 1#
#
#generate data#
y = rmvnorm(500, rep(0, Time), tau_p * matrix(Exponential(dist_ij, kappas), Time, Time, byrow = TRUE))#
GPpost = function(kappa, parameter, tau, dist_ij, a, b) {#
    if (kappa > 0 & tau > 0) {#
        lprior1 = dhalfcauchy(kappa, 5, log = TRUE)#
        lprior2 = sum(dinvgamma(tau, a, b, log = TRUE))#
        Time = nrow(parameter)#
        covfcmat = Exponential(dist_ij, kappa, phi = tau)#
        if (is.positive.definite(covfcmat) == FALSE) {covfcmat = as.matrix(nearPD(covfcmat)$mat)}#
        dims = ncol(parameter)#
        lpost = 0#
        for (col in 1:dims) {#
        		if (sum(is.na(parameter[,col])) == 0) {#
            lpost = lpost + rcpp_log_dmvnorm(covfcmat, rep(0, Time), c(parameter[,col]), FALSE)#
            }#
        }#
        sums = as.vector(lpost + lprior1 + lprior2)#
    } else {#
        sums = -Inf#
    }#
    return(sums)#
}#
#estimation of GP parameters#
a = 2#
b = 1#
#initial values#
kappas = rhalfcauchy(1, 5)#
tau_p = rinvgamma(1, a, b)#
#
kappasPS = c()#
tauPS = c()#
for (it in 1:2500) {#
var.old = c(kappas, tau_p)#
var.new = exp(rcpp_rmvnorm(1, diag(c(0.01, 0.1)) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))#
temp = GPpost(var.new[1], t(y), var.new[2], dist_ij, a, b) -#
       GPpost(var.old[1], t(y), var.old[2], dist_ij, a, b)#
alpha = min(0, temp)#
if (u <= alpha) {#
	kappas = var.new[1]#
	tau_p = var.new[2]#
}#
	kappasPS = c(kappasPS, kappas)#
	tauPS = c(tauPS, tau_p)#
}
length(unique(kappasPS))/2500
#estimation of GP parameters#
a = 2#
b = 1#
#initial values#
kappas = rhalfcauchy(1, 5)#
tau_p = rinvgamma(1, a, b)#
#
kappasPS = c()#
tauPS = c()#
for (it in 1:2500) {#
var.old = c(kappas, tau_p)#
var.new = exp(rcpp_rmvnorm(1, diag(c(0.01, 0.05)) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))#
temp = GPpost(var.new[1], t(y), var.new[2], dist_ij, a, b) -#
       GPpost(var.old[1], t(y), var.old[2], dist_ij, a, b)#
alpha = min(0, temp)#
if (u <= alpha) {#
	kappas = var.new[1]#
	tau_p = var.new[2]#
}#
	kappasPS = c(kappasPS, kappas)#
	tauPS = c(tauPS, tau_p)#
}
length(unique(kappasPS))/2500
#estimation of GP parameters#
a = 2#
b = 1#
#initial values#
kappas = rhalfcauchy(1, 5)#
tau_p = rinvgamma(1, a, b)#
#
kappasPS = c()#
tauPS = c()#
for (it in 1:2500) {#
var.old = c(kappas, tau_p)#
var.new = exp(rcpp_rmvnorm(1, diag(c(0.01, 0.01)) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))#
temp = GPpost(var.new[1], t(y), var.new[2], dist_ij, a, b) -#
       GPpost(var.old[1], t(y), var.old[2], dist_ij, a, b)#
alpha = min(0, temp)#
if (u <= alpha) {#
	kappas = var.new[1]#
	tau_p = var.new[2]#
}#
	kappasPS = c(kappasPS, kappas)#
	tauPS = c(tauPS, tau_p)#
}
length(unique(kappasPS))/2500
#estimation of GP parameters#
a = 2#
b = 1#
#initial values#
kappas = rhalfcauchy(1, 5)#
tau_p = rinvgamma(1, a, b)#
#
kappasPS = c()#
tauPS = c()#
for (it in 1:2500) {#
var.old = c(kappas, tau_p)#
var.new = exp(rcpp_rmvnorm(1, diag(c(0.001, 0.001)) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))#
temp = GPpost(var.new[1], t(y), var.new[2], dist_ij, a, b) -#
       GPpost(var.old[1], t(y), var.old[2], dist_ij, a, b)#
alpha = min(0, temp)#
if (u <= alpha) {#
	kappas = var.new[1]#
	tau_p = var.new[2]#
}#
	kappasPS = c(kappasPS, kappas)#
	tauPS = c(tauPS, tau_p)
}
par(mfrow = c(1, 2))#
plot(tauPS, type = 'l')#
abline(h = tau_p_true, col= "red")#
plot(kappasPS, type = 'l')#
abline(h = kappas_true, col= "red")
length(unique(kappasPS))/2500
#estimation of GP parameters#
a = 2#
b = 1#
#initial values#
kappas = rhalfcauchy(1, 5)#
tau_p = rinvgamma(1, a, b)#
#
kappasPS = c()#
tauPS = c()#
for (it in 1:2500) {#
var.old = c(kappas, tau_p)#
var.new = exp(rcpp_rmvnorm(1, diag(c(0.005, 0.005)) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))#
temp = GPpost(var.new[1], t(y), var.new[2], dist_ij, a, b) -#
       GPpost(var.old[1], t(y), var.old[2], dist_ij, a, b)#
alpha = min(0, temp)#
if (u <= alpha) {#
	kappas = var.new[1]#
	tau_p = var.new[2]#
}#
	kappasPS = c(kappasPS, kappas)#
	tauPS = c(tauPS, tau_p)#
}
par(mfrow = c(1, 2))#
plot(tauPS, type = 'l')#
abline(h = tau_p_true, col= "red")#
plot(kappasPS, type = 'l')#
abline(h = kappas_true, col= "red")
length(unique(kappasPS))/2500
load('~/Desktop/UN_full1.RData')
rm(list=ls())#
#################################
#Generate GP data#
library(fields)#
library(mvtnorm)#
library(FastGP)#
library(LaplacesDemon)#
kappas_true = kappas = 30  #very highly correlated (can change this to no correlation = 0.001 or medium = 10)#
Time = 32#
dist_ij = c()#
for (i in 1:Time) {#
 for (j in 1:Time) {#
 dist_ij = c(dist_ij, abs(i-j))#
 }#
}#
dist_ij = matrix(dist_ij, Time, Time)#
tau_p_true = tau_p = 1#
#
#generate data#
y = rmvnorm(97, rep(0, Time), tau_p * matrix(Exponential(dist_ij, kappas), Time, Time, byrow = TRUE))#
GPpost = function(kappa, parameter, tau, dist_ij, a, b) {#
    if (kappa > 0 & tau > 0) {#
        lprior1 = dhalfcauchy(kappa, 5, log = TRUE)#
        lprior2 = sum(dinvgamma(tau, a, b, log = TRUE))#
        Time = nrow(parameter)#
        covfcmat = Exponential(dist_ij, kappa, phi = tau)#
        if (is.positive.definite(covfcmat) == FALSE) {covfcmat = as.matrix(nearPD(covfcmat)$mat)}#
        dims = ncol(parameter)#
        lpost = 0#
        for (col in 1:dims) {#
        		if (sum(is.na(parameter[,col])) == 0) {#
            lpost = lpost + rcpp_log_dmvnorm(covfcmat, rep(0, Time), c(parameter[,col]), FALSE)#
            }#
        }#
        sums = as.vector(lpost + lprior1 + lprior2)#
    } else {#
        sums = -Inf#
    }#
    return(sums)#
}#
#estimation of GP parameters#
a = 2#
b = 1#
#initial values#
kappas = rhalfcauchy(1, 5)#
tau_p = rinvgamma(1, a, b)#
#
kappasPS = c()#
tauPS = c()#
for (it in 1:2500) {#
var.old = c(kappas, tau_p)#
var.new = exp(rcpp_rmvnorm(1, diag(c(0.01, 0.01) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))#
temp = GPpost(var.new[1], t(y), var.new[2], dist_ij, a, b) -#
       GPpost(var.old[1], t(y), var.old[2], dist_ij, a, b)#
alpha = min(0, temp)#
if (u <= alpha) {#
	kappas = var.new[1]#
	tau_p = var.new[2]#
}#
	kappasPS = c(kappasPS, kappas)#
	tauPS = c(tauPS, tau_p)#
}
rm(list=ls())#
#################################
#Generate GP data#
library(fields)#
library(mvtnorm)#
library(FastGP)#
library(LaplacesDemon)#
kappas_true = kappas = 30  #very highly correlated (can change this to no correlation = 0.001 or medium = 10)#
Time = 32#
dist_ij = c()#
for (i in 1:Time) {#
 for (j in 1:Time) {#
 dist_ij = c(dist_ij, abs(i-j))#
 }#
}#
dist_ij = matrix(dist_ij, Time, Time)#
tau_p_true = tau_p = 1#
#
#generate data#
y = rmvnorm(97, rep(0, Time), tau_p * matrix(Exponential(dist_ij, kappas), Time, Time, byrow = TRUE))#
GPpost = function(kappa, parameter, tau, dist_ij, a, b) {#
    if (kappa > 0 & tau > 0) {#
        lprior1 = dhalfcauchy(kappa, 5, log = TRUE)#
        lprior2 = sum(dinvgamma(tau, a, b, log = TRUE))#
        Time = nrow(parameter)#
        covfcmat = Exponential(dist_ij, kappa, phi = tau)#
        if (is.positive.definite(covfcmat) == FALSE) {covfcmat = as.matrix(nearPD(covfcmat)$mat)}#
        dims = ncol(parameter)#
        lpost = 0#
        for (col in 1:dims) {#
        		if (sum(is.na(parameter[,col])) == 0) {#
            lpost = lpost + rcpp_log_dmvnorm(covfcmat, rep(0, Time), c(parameter[,col]), FALSE)#
            }#
        }#
        sums = as.vector(lpost + lprior1 + lprior2)#
    } else {#
        sums = -Inf#
    }#
    return(sums)#
}
#estimation of GP parameters#
a = 2#
b = 1#
#initial values#
kappas = rhalfcauchy(1, 5)#
tau_p = rinvgamma(1, a, b)#
#
kappasPS = c()#
tauPS = c()#
for (it in 1:2500) {#
var.old = c(kappas, tau_p)#
var.new = exp(rcpp_rmvnorm(1, diag(c(0.01, 0.01) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))#
temp = GPpost(var.new[1], t(y), var.new[2], dist_ij, a, b) -#
       GPpost(var.old[1], t(y), var.old[2], dist_ij, a, b)#
alpha = min(0, temp)#
if (u <= alpha) {#
	kappas = var.new[1]#
	tau_p = var.new[2]#
}#
	kappasPS = c(kappasPS, kappas)#
	tauPS = c(tauPS, tau_p)#
}#
par(mfrow = c(1, 2))#
plot(tauPS[-c(1:500)], type = 'l')#
abline(h = tau_p_true, col= "red")#
plot(kappasPS[-c(1:500)], type = 'l')#
abline(h = kappas_true, col= "red")
rm(list=ls())#
#################################
#Generate GP data#
library(fields)#
library(mvtnorm)#
library(FastGP)#
library(LaplacesDemon)#
kappas_true = kappas = 30  #very highly correlated (can change this to no correlation = 0.001 or medium = 10)#
Time = 32#
dist_ij = c()#
for (i in 1:Time) {#
 for (j in 1:Time) {#
 dist_ij = c(dist_ij, abs(i-j))#
 }#
}#
dist_ij = matrix(dist_ij, Time, Time)#
tau_p_true = tau_p = 1#
#
#generate data#
y = rmvnorm(97, rep(0, Time), tau_p * matrix(Exponential(dist_ij, kappas), Time, Time, byrow = TRUE))#
GPpost = function(kappa, parameter, tau, dist_ij, a, b) {#
    if (kappa > 0 & tau > 0) {#
        lprior1 = dhalfcauchy(kappa, 5, log = TRUE)#
        lprior2 = sum(dinvgamma(tau, a, b, log = TRUE))#
        Time = nrow(parameter)#
        covfcmat = Exponential(dist_ij, kappa, phi = tau)#
        if (is.positive.definite(covfcmat) == FALSE) {covfcmat = as.matrix(nearPD(covfcmat)$mat)}#
        dims = ncol(parameter)#
        lpost = 0#
        for (col in 1:dims) {#
        		if (sum(is.na(parameter[,col])) == 0) {#
            lpost = lpost + rcpp_log_dmvnorm(covfcmat, rep(0, Time), c(parameter[,col]), FALSE)#
            }#
        }#
        sums = as.vector(lpost + lprior1 + lprior2)#
    } else {#
        sums = -Inf#
    }#
    return(sums)#
}#
#estimation of GP parameters#
a = 2#
b = 1#
#initial values#
kappas = rhalfcauchy(1, 5)#
tau_p = rinvgamma(1, a, b)#
#
kappasPS = c()#
tauPS = c()#
for (it in 1:2500) {#
var.old = c(kappas, tau_p)#
var.new = exp(rcpp_rmvnorm(1, diag(c(0.01, 0.01)) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))#
temp = GPpost(var.new[1], t(y), var.new[2], dist_ij, a, b) -#
       GPpost(var.old[1], t(y), var.old[2], dist_ij, a, b)#
alpha = min(0, temp)#
if (u <= alpha) {#
	kappas = var.new[1]#
	tau_p = var.new[2]#
}#
	kappasPS = c(kappasPS, kappas)#
	tauPS = c(tauPS, tau_p)#
}#
par(mfrow = c(1, 2))#
plot(tauPS[-c(1:500)], type = 'l')#
abline(h = tau_p_true, col= "red")#
plot(kappasPS[-c(1:500)], type = 'l')#
abline(h = kappas_true, col= "red")
length(unique(kappasPS))/2500
#estimation of GP parameters#
a = 2#
b = 1#
#initial values#
kappas = rhalfcauchy(1, 5)#
tau_p = rinvgamma(1, a, b)#
#
kappasPS = c()#
tauPS = c()#
for (it in 1:2500) {#
var.old = c(kappas, tau_p)#
var.new = exp(rcpp_rmvnorm(1, diag(c(0.01, 0.02)) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))#
temp = GPpost(var.new[1], t(y), var.new[2], dist_ij, a, b) -#
       GPpost(var.old[1], t(y), var.old[2], dist_ij, a, b)#
alpha = min(0, temp)#
if (u <= alpha) {#
	kappas = var.new[1]#
	tau_p = var.new[2]#
}#
	kappasPS = c(kappasPS, kappas)#
	tauPS = c(tauPS, tau_p)#
}#
par(mfrow = c(1, 2))#
plot(tauPS[-c(1:500)], type = 'l')#
abline(h = tau_p_true, col= "red")#
plot(kappasPS[-c(1:500)], type = 'l')#
abline(h = kappas_true, col= "red")
length(unique(kappasPS))/2500
kappasPS = c()#
tauPS = c()#
for (it in 1:2500) {#
var.old = c(kappas, tau_p)#
var.new = exp(rcpp_rmvnorm(1, diag(c(0.005, 0.01)) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))#
temp = GPpost(var.new[1], t(y), var.new[2], dist_ij, a, b) -#
       GPpost(var.old[1], t(y), var.old[2], dist_ij, a, b)#
alpha = min(0, temp)#
if (u <= alpha) {#
	kappas = var.new[1]#
	tau_p = var.new[2]#
}#
	kappasPS = c(kappasPS, kappas)#
	tauPS = c(tauPS, tau_p)#
}#
par(mfrow = c(1, 2))#
plot(tauPS[-c(1:500)], type = 'l')#
abline(h = tau_p_true, col= "red")#
plot(kappasPS[-c(1:500)], type = 'l')#
abline(h = kappas_true, col= "red")
length(unique(kappasPS))/2500
kappasPS = c()#
tauPS = c()#
for (it in 1:2500) {#
var.old = c(kappas, tau_p)#
var.new = exp(rcpp_rmvnorm(1, diag(c(0.001, 0.01)) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))#
temp = GPpost(var.new[1], t(y), var.new[2], dist_ij, a, b) -#
       GPpost(var.old[1], t(y), var.old[2], dist_ij, a, b)#
alpha = min(0, temp)#
if (u <= alpha) {#
	kappas = var.new[1]#
	tau_p = var.new[2]#
}#
	kappasPS = c(kappasPS, kappas)#
	tauPS = c(tauPS, tau_p)#
}#
par(mfrow = c(1, 2))#
plot(tauPS[-c(1:500)], type = 'l')#
abline(h = tau_p_true, col= "red")#
plot(kappasPS[-c(1:500)], type = 'l')#
abline(h = kappas_true, col= "red")
length(unique(kappasPS))/2500
#estimation of GP parameters#
a = 2#
b = 1#
#initial values#
kappas = rhalfcauchy(1, 5)#
tau_p = rinvgamma(1, a, b)#
#
kappasPS = c()#
tauPS = c()#
for (it in 1:2500) {#
var.old = c(kappas, tau_p)#
var.new = exp(rcpp_rmvnorm(1, diag(c(0.01, 0.01)) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))#
temp = GPpost(var.new[1], t(y), var.new[2], dist_ij, a, b) -#
       GPpost(var.old[1], t(y), var.old[2], dist_ij, a, b)#
alpha = min(0, temp)#
if (u <= alpha) {#
	kappas = var.new[1]#
	tau_p = var.new[2]#
}#
	kappasPS = c(kappasPS, kappas)#
	tauPS = c(tauPS, tau_p)#
}#
par(mfrow = c(1, 2))#
plot(tauPS[-c(1:500)], type = 'l')#
abline(h = tau_p_true, col= "red")#
plot(kappasPS[-c(1:500)], type = 'l')#
abline(h = kappas_true, col= "red")
length(unique(kappasPS))/2500
#estimation of GP parameters#
a = 2#
b = 1#
#initial values#
kappas = rhalfcauchy(1, 5)#
tau_p = rinvgamma(1, a, b)#
#
kappasPS = c()#
tauPS = c()#
for (it in 1:2500) {#
var.old = c(kappas, tau_p)#
var.new = exp(rcpp_rmvnorm(1, diag(c(0.01, 0.02)) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))#
temp = GPpost(var.new[1], t(y), var.new[2], dist_ij, a, b) -#
       GPpost(var.old[1], t(y), var.old[2], dist_ij, a, b)#
alpha = min(0, temp)#
if (u <= alpha) {#
	kappas = var.new[1]#
	tau_p = var.new[2]#
}#
	kappasPS = c(kappasPS, kappas)#
	tauPS = c(tauPS, tau_p)#
}#
par(mfrow = c(1, 2))#
plot(tauPS[-c(1:500)], type = 'l')#
abline(h = tau_p_true, col= "red")#
plot(kappasPS[-c(1:500)], type = 'l')#
abline(h = kappas_true, col= "red")
length(unique(kappasPS))/2500
#estimation of GP parameters#
a = 2#
b = 1#
#initial values#
kappas = rhalfcauchy(1, 5)#
tau_p = rinvgamma(1, a, b)#
#
kappasPS = c()#
tauPS = c()#
for (it in 1:2500) {#
var.old = c(kappas, tau_p)#
var.new = exp(rcpp_rmvnorm(1, diag(c(0.025, 0.025)) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))#
temp = GPpost(var.new[1], t(y), var.new[2], dist_ij, a, b) -#
       GPpost(var.old[1], t(y), var.old[2], dist_ij, a, b)#
alpha = min(0, temp)#
if (u <= alpha) {#
	kappas = var.new[1]#
	tau_p = var.new[2]#
}#
	kappasPS = c(kappasPS, kappas)#
	tauPS = c(tauPS, tau_p)#
}#
par(mfrow = c(1, 2))#
plot(tauPS[-c(1:500)], type = 'l')#
abline(h = tau_p_true, col= "red")#
plot(kappasPS[-c(1:500)], type = 'l')#
abline(h = kappas_true, col= "red")
length(unique(kappasPS))/2500
#estimation of GP parameters#
a = 2#
b = 1#
#initial values#
kappas = rhalfcauchy(1, 5)#
tau_p = rinvgamma(1, a, b)#
#
kappasPS = c()#
tauPS = c()#
for (it in 1:2500) {#
var.old = c(kappas, tau_p)#
var.new = exp(rcpp_rmvnorm(1, diag(c(0.025, 0.01)) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))#
temp = GPpost(var.new[1], t(y), var.new[2], dist_ij, a, b) -#
       GPpost(var.old[1], t(y), var.old[2], dist_ij, a, b)#
alpha = min(0, temp)#
if (u <= alpha) {#
	kappas = var.new[1]#
	tau_p = var.new[2]#
}#
	kappasPS = c(kappasPS, kappas)#
	tauPS = c(tauPS, tau_p)#
}#
par(mfrow = c(1, 2))#
plot(tauPS[-c(1:500)], type = 'l')#
abline(h = tau_p_true, col= "red")#
plot(kappasPS[-c(1:500)], type = 'l')#
abline(h = kappas_true, col= "red")#
length(unique(kappasPS))/2500
#estimation of GP parameters#
a = 2#
b = 1#
#initial values#
kappas = rhalfcauchy(1, 5)#
tau_p = rinvgamma(1, a, b)#
#
kappasPS = c()#
tauPS = c()#
for (it in 1:2500) {#
var.old = c(kappas, tau_p)#
var.new = exp(rcpp_rmvnorm(1, diag(c(0.05, 0.01)) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))#
temp = GPpost(var.new[1], t(y), var.new[2], dist_ij, a, b) -#
       GPpost(var.old[1], t(y), var.old[2], dist_ij, a, b)#
alpha = min(0, temp)#
if (u <= alpha) {#
	kappas = var.new[1]#
	tau_p = var.new[2]#
}#
	kappasPS = c(kappasPS, kappas)#
	tauPS = c(tauPS, tau_p)#
}#
par(mfrow = c(1, 2))#
plot(tauPS[-c(1:500)], type = 'l')#
abline(h = tau_p_true, col= "red")#
plot(kappasPS[-c(1:500)], type = 'l')#
abline(h = kappas_true, col= "red")#
length(unique(kappasPS))/2500
#estimation of GP parameters#
a = 2#
b = 1#
#initial values#
kappas = rhalfcauchy(1, 5)#
tau_p = rinvgamma(1, a, b)#
#
kappasPS = c()#
tauPS = c()#
for (it in 1:2500) {#
var.old = c(kappas, tau_p)#
var.new = exp(rcpp_rmvnorm(1, diag(c(0.05, 0.05)) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))#
temp = GPpost(var.new[1], t(y), var.new[2], dist_ij, a, b) -#
       GPpost(var.old[1], t(y), var.old[2], dist_ij, a, b)#
alpha = min(0, temp)#
if (u <= alpha) {#
	kappas = var.new[1]#
	tau_p = var.new[2]#
}#
	kappasPS = c(kappasPS, kappas)#
	tauPS = c(tauPS, tau_p)#
}#
par(mfrow = c(1, 2))#
plot(tauPS[-c(1:500)], type = 'l')#
abline(h = tau_p_true, col= "red")#
plot(kappasPS[-c(1:500)], type = 'l')#
abline(h = kappas_true, col= "red")#
length(unique(kappasPS))/2500
#estimation of GP parameters#
a = 2#
b = 1#
#initial values#
kappas = rhalfcauchy(1, 5)#
tau_p = rinvgamma(1, a, b)#
#
kappasPS = c()#
tauPS = c()#
for (it in 1:2500) {#
var.old = c(kappas, tau_p)#
var.new = exp(rcpp_rmvnorm(1, diag(c(0.025, 0.05)) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))#
temp = GPpost(var.new[1], t(y), var.new[2], dist_ij, a, b) -#
       GPpost(var.old[1], t(y), var.old[2], dist_ij, a, b)#
alpha = min(0, temp)#
if (u <= alpha) {#
	kappas = var.new[1]#
	tau_p = var.new[2]#
}#
	kappasPS = c(kappasPS, kappas)#
	tauPS = c(tauPS, tau_p)#
}#
par(mfrow = c(1, 2))#
plot(tauPS[-c(1:500)], type = 'l')#
abline(h = tau_p_true, col= "red")#
plot(kappasPS[-c(1:500)], type = 'l')#
abline(h = kappas_true, col= "red")#
length(unique(kappasPS))/2500
#estimation of GP parameters#
a = 2#
b = 1#
#initial values#
kappas = rhalfcauchy(1, 5)#
tau_p = rinvgamma(1, a, b)#
#
kappasPS = c()#
tauPS = c()#
for (it in 1:2500) {#
var.old = c(kappas, tau_p)#
var.new = exp(rcpp_rmvnorm(1, diag(c(0.025, 0.01)) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))#
temp = GPpost(var.new[1], t(y), var.new[2], dist_ij, a, b) -#
       GPpost(var.old[1], t(y), var.old[2], dist_ij, a, b)#
alpha = min(0, temp)#
if (u <= alpha) {#
	kappas = var.new[1]#
	tau_p = var.new[2]#
}#
	kappasPS = c(kappasPS, kappas)#
	tauPS = c(tauPS, tau_p)#
}#
par(mfrow = c(1, 2))#
plot(tauPS[-c(1:500)], type = 'l')#
abline(h = tau_p_true, col= "red")#
plot(kappasPS[-c(1:500)], type = 'l')#
abline(h = kappas_true, col= "red")#
length(unique(kappasPS))/2500
#estimation of GP parameters#
a = 2#
b = 1#
#initial values#
kappas = rhalfcauchy(1, 5)#
tau_p = rinvgamma(1, a, b)#
#
kappasPS = c()#
tauPS = c()#
for (it in 1:2500) {#
var.old = c(kappas, tau_p)#
var.new = exp(rcpp_rmvnorm(1, diag(c(0.01, 0.005)) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))#
temp = GPpost(var.new[1], t(y), var.new[2], dist_ij, a, b) -#
       GPpost(var.old[1], t(y), var.old[2], dist_ij, a, b)#
alpha = min(0, temp)#
if (u <= alpha) {#
	kappas = var.new[1]#
	tau_p = var.new[2]#
}#
	kappasPS = c(kappasPS, kappas)#
	tauPS = c(tauPS, tau_p)#
}#
par(mfrow = c(1, 2))#
plot(tauPS[-c(1:500)], type = 'l')#
abline(h = tau_p_true, col= "red")#
plot(kappasPS[-c(1:500)], type = 'l')#
abline(h = kappas_true, col= "red")#
length(unique(kappasPS))/2500
#estimation of GP parameters#
a = 2#
b = 1#
#initial values#
kappas = rhalfcauchy(1, 5)#
tau_p = rinvgamma(1, a, b)#
#
kappasPS = c()#
tauPS = c()#
for (it in 1:2500) {#
var.old = c(kappas, tau_p)#
var.new = exp(rcpp_rmvnorm(1, diag(c(0.01, 0.001)) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))#
temp = GPpost(var.new[1], t(y), var.new[2], dist_ij, a, b) -#
       GPpost(var.old[1], t(y), var.old[2], dist_ij, a, b)#
alpha = min(0, temp)#
if (u <= alpha) {#
	kappas = var.new[1]#
	tau_p = var.new[2]#
}#
	kappasPS = c(kappasPS, kappas)#
	tauPS = c(tauPS, tau_p)#
}#
par(mfrow = c(1, 2))#
plot(tauPS[-c(1:500)], type = 'l')#
abline(h = tau_p_true, col= "red")#
plot(kappasPS[-c(1:500)], type = 'l')#
abline(h = kappas_true, col= "red")#
length(unique(kappasPS))/2500  #very low acceptance rate...need better ways
#estimation of GP parameters#
a = 2#
b = 1#
#initial values#
kappas = rhalfcauchy(1, 5)#
tau_p = rinvgamma(1, a, b)#
#
kappasPS = c()#
tauPS = c()#
for (it in 1:2500) {#
var.old = c(kappas, tau_p)#
var.new = exp(rcpp_rmvnorm(1, diag(c(0.01, 0.005)) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))#
temp = GPpost(var.new[1], t(y), var.new[2], dist_ij, a, b) -#
       GPpost(var.old[1], t(y), var.old[2], dist_ij, a, b)#
alpha = min(0, temp)#
if (u <= alpha) {#
	kappas = var.new[1]#
	tau_p = var.new[2]#
}#
	kappasPS = c(kappasPS, kappas)#
	tauPS = c(tauPS, tau_p)#
}#
par(mfrow = c(1, 2))#
plot(tauPS[-c(1:500)], type = 'l')#
abline(h = tau_p_true, col= "red")#
plot(kappasPS[-c(1:500)], type = 'l')#
abline(h = kappas_true, col= "red")#
length(unique(kappasPS))/2500  #low acceptance rate...need better ways
#estimation of GP parameters#
a = 2#
b = 1#
#initial values#
kappas = rhalfcauchy(1, 5)#
tau_p = rinvgamma(1, a, b)#
#
kappasPS = c()#
tauPS = c()#
for (it in 1:2500) {#
var.old = c(kappas, tau_p)#
var.new = exp(rcpp_rmvnorm(1, diag(c(0.01, 0.01)) , log(var.old)))    #can modify proposal variance#
u = log(runif(1))#
temp = GPpost(var.new[1], t(y), var.new[2], dist_ij, a, b) -#
       GPpost(var.old[1], t(y), var.old[2], dist_ij, a, b)#
alpha = min(0, temp)#
if (u <= alpha) {#
	kappas = var.new[1]#
	tau_p = var.new[2]#
}#
	kappasPS = c(kappasPS, kappas)#
	tauPS = c(tauPS, tau_p)#
}#
par(mfrow = c(1, 2))#
plot(tauPS[-c(1:500)], type = 'l')#
abline(h = tau_p_true, col= "red")#
plot(kappasPS[-c(1:500)], type = 'l')#
abline(h = kappas_true, col= "red")#
length(unique(kappasPS))/2500  #low acceptance rate...need better ways
library(ame)
library(amen)
install.packages("amen")
library(amen)
data(IR90s)#
gdp<-IR90s$nodevars[,2]#
topgdp<-which(gdp>=sort(gdp,decreasing=TRUE)[30] )
Y<-log( IR90s$dyadvars[topgdp,topgdp,2] + 1 )
fit_SRM<-ame(Y)
Y
ame(Y)
?ame
data(YX_frn) #
fit<-ame(YX_frn$Y,YX_frn$X,burn=5,nscan=5,odens=1,model="frn")
install.packages("amen")
libarary(amen)
library(amen)
data(YX_frn) #
fit<-ame(YX_frn$Y,YX_frn$X,burn=5,nscan=5,odens=1,model="frn")
y
load('~/Desktop/UN_full_try.RData')
plot(UN$s2, type = 'l')
names(UN)
plot(UN$kappas[,9])
plot(UN$kappas[,9], type = 'l')
plot(UN$kappas[,8], type = 'l')
plot(UN$tau[,8], type = 'l')
plot(UN$tau[,9], type = 'l')
plot(UN$DPS[[1]])
dim(UN$DPS[[1]])
plot(UN$DPS[[1]][,1], type = 'l')
plot(UN$DPS[[1]][,2], type = 'l')
#full#
rm(list=ls())#
library(devtools)#
setwd('/Users/bomin8319/Desktop/DAME_revision/DAME_code_revised/DAME_pkg_revised/R')#
load_all()
#full#
rm(list=ls())#
library(devtools)#
setwd('/Users/bomin8319/Desktop/DAME_revision/DAME_code_revised/DAME_pkg_revised/R')#
load_all()
#full#
rm(list=ls())#
library(devtools)#
setwd('/Users/bomin8319/Desktop/DAME_revision/DAME_code_revised/DAME_pkg_revised/R')#
load_all()
setwd("/Users/bomin8319/Desktop/DAME_revision/DAME_code_revised/DAME_pkg_revised/R")
document()
document()
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
getwd()
load_all()
install()
check()
check()
install()
library(devtools)
getwd()
setwd("/Users/bomin8319/Desktop/DAME_revision/DAME_code_revised/DAME_pkg_revised/")
document()
check()
install()
